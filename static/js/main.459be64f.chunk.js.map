{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","_this","this","displayText","props","text","displayEmoji","emoji","getUnicode","react_default","a","createElement","className","id","type","onClick","onDeleteCard","Component","EMOJI_LIST","NewCardForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addCard","event","preventDefault","card","state","addCardCallback","setState","objectSpread","cleared","onInputChange","updatedState","field","target","name","value","displayEmojiList","map","smiley","onSubmit","onChange","Board","ourURL","url","boardName","cardID","axios","delete","delURL","then","response","console","log","newCardList","cardList","filter","catch","error","message","post","data","newCards","concat","toConsumableArray","currentCard","undefined","_this2","get","_this3","displayCards","i","src_components_Card","key","src_components_NewCardForm","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.459be64f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nclass Card extends Component {\n  render() {\n\n    const displayText = (this.props.text) ? this.props.text : \"\"\n\n    const displayEmoji = (this.props.emoji) ? emoji.getUnicode(this.props.emoji) : \"\"\n\n    return (\n      <div className=\"card\">\n        <section className=\"card__content\">\n          #{ this.props.id }:\n            <p className=\"card__content-text\"> { displayText } </p> \n            <p className=\"card__content-emoji\"> { displayEmoji } </p>\n            <button\n              type=\"button\"\n              className = \"card__delete\"\n              onClick = {() => this.props.onDeleteCard(this.props.id)}\n            >\n              Delete\n            </button>\n        </section>\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  id: PropTypes.number,\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  onDeleteCard: PropTypes.func,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nclass NewCardForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.cleared = {\n      id: '',\n      text: '',\n      emoji: '',\n    };\n\n    this.state = {...this.cleared}\n  }\n\n  addCard = (event) => {\n    event.preventDefault();\n\n    const card = this.state;\n    this.props.addCardCallback(card)\n\n    this.setState({...this.cleared})\n  }\n\n  onInputChange = (event) => {\n    const updatedState = {};\n\n    const field = event.target.name;\n    const value = event.target.value;\n\n    updatedState[field] = value;\n    this.setState(updatedState);\n  }\n\n  displayEmojiList = EMOJI_LIST.map((smiley) => {\n    return <option value={ smiley }>{ emoji.getUnicode(smiley) }</option>\n  })\n\n  render(){\n    return (\n      <form  className=\"new-card-form\" onSubmit={ this.addCard }>\n        <h3>Add an Inspirational Card to the Board!</h3>\n        <label>\n          Text: \n          <input \n            name=\"text\" \n            type=\"text\"\n            value={ this.state.text }\n            onChange={ this.onInputChange }></input>\n        </label>\n        <label>\n          Emoji:\n          <select \n            name=\"emoji\"  \n            value={ this.state.emoji }\n            onChange={ this.onInputChange }>\n              { this.displayEmojiList }\n          </select>\n        </label>\n        <input className=\"btn btn-success new-card-form--submit\" type=\"submit\" name=\"submit\" value=\"Add a Card\" />\n      </form>\n    )\n  }\n}\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      cardList: [],\n      currentCard: undefined,\n    };\n  }\n  \n  ourURL = (this.props.url)+(this.props.boardName)+\"/cards\"\n  \n  componentDidMount() {\n    axios.get(this.ourURL)\n    .then((response) => {\n      console.log(response.data);\n\n      const cardList = response.data.map((card) => {\n        const newCard = {\n          id: card.card.id,\n          text: card.card.text,\n          emoji: card.card.emoji\n        }\n        return newCard;\n      })\n  \n      console.log(cardList);\n  \n      this.setState({ cardList });\n    })\n    .catch((error) => {\n      this.setState({ error: error.message })\n    })\n  }\n\n  onDeleteCard = (cardID) => {\n    axios.delete(this.props.delURL+cardID)\n    .then((response) => {\n      console.log(response)\n      const newCardList = this.state.cardList.filter(card => card.id !== cardID);\n  \n      this.setState({ cardList: newCardList })\n    })\n    .catch((error) => {\n      this.setState({ error: error.message })\n    })\n  }\n\n  addCardCallback = (card) => {\n    axios.post(this.ourURL, card)\n    .then((response) => {\n      console.log(response)\n      card.id = response.data.card.id;\n      console.log(card);\n\n      const newCards = [card, ...this.state.cardList];\n      this.setState({ cardList: newCards })\n    })\n    .catch((error) => {\n      this.setState({ error: error.message })\n    })\n  }\n  \n  render() {\n    const displayCards = this.state.cardList.map((card, i) => {\n      return <Card \n                key={i}\n                id={card.id}\n                text={card.text}\n                emoji={card.emoji}\n                onDeleteCard={this.onDeleteCard}\n              />\n    })\n\n    return (\n      <div>\n        <article className=\"new-card-form\">\n          <NewCardForm addCardCallback={this.addCardCallback} />\n        </article>\n        <article className=\"board\">\n          { displayCards }\n        </article>\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n  url: PropTypes.string,\n  boardName: PropTypes.string\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          url=\"https://inspiration-board.herokuapp.com/boards/\"\n          delURL =\"https://inspiration-board.herokuapp.com/cards/\"\n          boardName={`Pauline`}\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}